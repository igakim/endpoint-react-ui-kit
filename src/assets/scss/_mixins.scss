@import "./theme";

@mixin theme-aware($key, $color, $element) {
  @each $theme-name, $theme-elements in $themes {
    .theme-#{$theme-name} & {
      #{$key}: map-get(map-get($theme-elements, $element), $color) !important
    }
  }
}

@mixin get-btn-sizes($element) {
  @each $size-name, $size-value in map-get($sizes, $element) {
    &.#{$size-name} {
      @each $name, $value in $size-value {
        #{$name}: $value;
      }
    }
    &.#{$size-name} .append-icon{
      width: map-get($size-value, 'icon-width');
      margin-left: 5px;
    }
    &.#{$size-name} .prepend-icon{
      width: map-get($size-value, 'icon-width');
      margin-right: 5px;
    }
  }
}

@mixin get-buttons() {
  @each $theme-name, $theme-elements in $themes {
    @each $button-type, $button-value in map-get($theme-elements, 'buttons') {
      // FILLED BUTTON
      .theme-#{$theme-name} &-#{$button-type} {
        background-color: $button-value;
        border-color: $button-value;
        color: $contrast-text-light;
        &:hover {
          background-color: transparent;
          color: $button-value;
        }
        &:disabled {
          background-color: lighten($button-value, 20%);
          border-color: lighten($button-value, 20%);
          color: lighten($contrast-text-light, 20%);
        }
      }

      // OUTLINED BUTTON
      .theme-#{$theme-name} &-outline-#{$button-type} {
        background-color: transparent;
        border-color: $button-value;
        color: $button-value;
        &:hover {
          background-color: $button-value;
          border-color: $button-value;
          color: $contrast-text-light;
        }
        &:disabled {
          background-color: transparent;
          border-color: lighten($button-value, 20%);
          color: lighten($button-value, 20%);
        }
      }

      // CONTRASTED BUTTON
      .theme-#{$theme-name} &-contrasted-#{$button-type} {
        background-color: lighten($button-value, 42%);
        border-color: lighten($button-value, 42%);
        color: lighten($button-value, 15%);
        &:hover {
          background-color: lighten($button-value, 20%);
          color: $contrast-text-light;
        }
        &:disabled {
          background-color: lighten($button-value, 52%);
          border-color: lighten($button-value, 30%);
          color: lighten($button-value, 30%);
        }
      }

      // TEXT BUTTON
      .theme-#{$theme-name} &-text-#{$button-type} {
        background-color: transparent !important;
        border-color: transparent !important;
        color: $button-value;
        &:hover {
          background-color: lighten($button-value, 40%);
          color: darken($button-value, 40%);
        }
        &:disabled {
          color: lighten($button-value, 20%);
        }
      }

    }
  }
}

@mixin get-typography() {
  @each $theme-name, $theme-elements in $themes {
    @each $typography, $typography-value in map-get($theme-elements, 'typography') {
      .theme-#{$theme-name} &-#{$typography} {
        color: $typography-value;
      }
    }
  }
}

@mixin get-input-base {
  box-sizing: border-box;
  border-width: 1px;
  border-style: solid;
  width: 100%;
  &:focus {
    outline: none;
    border-width: 1px;
    border-style: solid;
  }
  &:disabled {
    background-color: $muted-bg-light !important;
    border-color: $muted-bg-light !important;
    &::placeholder {
      color: $muted-text-light !important;
    }
  }
}

@mixin get-input-sizes() {
  @each $size-name, $size-value in map-get($sizes, 'inputs') {
    &.#{$size-name} .input-base {
      @each $name, $value in $size-value {
        #{$name}: $value
      }
    }
    &.#{$size-name} .input-base.input-with-prepend {
      padding-left: map-get($size-value, 'font-size') * 2.8;
    }
    &.#{$size-name} .prepend-icon {
      display: none;
    }
    &.#{$size-name} .prepend-icon.show {
      width: map-get($size-value, 'font-size') * 2.4;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      & > svg {
        width: 50%;
      }
    }
    &.#{$size-name} .input-base.input-with-append {
      padding-right: map-get($size-value, 'font-size') * 2.8;
    }
    &.#{$size-name} .append-button {
      display: none;
    }
    &.#{$size-name} .append-button.show {
      width: map-get($size-value, 'font-size') * 2.4;
      height: 100%;
      position: absolute;
      top: 0;
      right: 0;
      display: inline-block;
      z-index: 9;
      &.input-calendar {
        z-index: 10;
      }
      & button {
        border: none;
        width: 100%;
        height: 100%;
        border-top-right-radius: map-get($size-value, 'border-radius');
        border-bottom-right-radius: map-get($size-value, 'border-radius');
        cursor: pointer;
        svg {
          margin-top: 2px;
        }
        &:focus {
          outline: none;
        }
      }
    }
  }
  @each $size-name, $size-value in map-get($sizes, 'inputTips') {
    &.#{$size-name} .input-tip {
      @each $name, $value in $size-value {
        #{$name}: $value
      }
    }
  }
}

@mixin get-input-types() {
  @each $theme-name, $theme-elements in $themes {
    @each $input-type, $input-value in map-get($theme-elements, 'inputs') {
      // FILLED INPUT
      .theme-#{$theme-name} &-#{$input-type} {
        background-color: map-get($input-value, 'bg-color');
        border-color: map-get($input-value, 'bg-color');
        color: map-get($input-value, 'text-color');
        &:focus {
          border-color: darken(map-get($input-value, 'bg-color'), 20%);
        }
        &::placeholder {
          color: lighten(map-get($input-value, 'text-color'), 10%);
        }
      }
      .theme-#{$theme-name} &-#{$input-type} + .append-button > button {
        border-top: 1px solid darken(map-get($input-value, 'bg-color'), 20%) !important;
        border-bottom: 1px solid darken(map-get($input-value, 'bg-color'), 20%) !important;
        border-right: 1px solid darken(map-get($input-value, 'bg-color'), 20%) !important;
        background-color: darken(map-get($input-value, 'bg-color'), 20%) !important;
        color: map-get($input-value, 'text-color') !important;
      }
      .theme-#{$theme-name} &-#{$input-type} + .append-icon {
        color: map-get($input-value, 'text-color') !important;
      }

      // OUTLINED INPUT
      .theme-#{$theme-name} &-outline-#{$input-type} {
        background-color: transparent;
        border-color: map-get($input-value, 'bg-color');
        &:focus {
          border-color: darken(map-get($input-value, 'bg-color'), 20%);
        }
        &::placeholder {
          color: lighten(map-get($input-value, 'text-color'), 10%);
        }
      }

      .theme-#{$theme-name} &-container .prepend-icon {
        color: map-get($input-value, 'text-color');
      }
      .theme-#{$theme-name} &-container .prepend-icon.bordered {
        border-right: 1px solid map-get($input-value, 'bg-color');
      }
      .theme-#{$theme-name} &-outline-#{$input-type} + .append-button > button {
        border-top: 1px solid map-get($input-value, 'bg-color') !important;
        border-bottom: 1px solid map-get($input-value, 'bg-color') !important;
        border-right: 1px solid map-get($input-value, 'bg-color') !important;
        background-color: map-get($input-value, 'bg-color') !important;
        color: map-get($input-value, 'text-color') !important;
      }
      .theme-#{$theme-name} &-outline-#{$input-type} + .append-icon {
        color: map-get($input-value, 'text-color') !important;
      }
    }
  }
}

@mixin get-input-states() {
  @each $theme-name, $theme-elements in $themes {
    @each $input-type, $input-value in map-get($theme-elements, 'inputStates') {
      .theme-#{$theme-name} &-#{$input-type} .input-base {
        border-color: lighten(map-get($input-value, 'color'), 10%) !important;
        color: map-get($input-value, 'color') !important;
        &::placeholder {
          color: map-get($input-value, 'color') !important;
        }
        &:focus {
          border-color: map-get($input-value, 'color') !important;
        }
      }
      .theme-#{$theme-name} &-#{$input-type} .input-base.input-filled {
        background-color: lighten(map-get($input-value, 'color'), 47%) !important;
        &::placeholder {
          color: map-get($input-value, 'color') !important;
        }
        &:focus {
          border-color: map-get($input-value, 'color') !important;
        }
      }
      .theme-#{$theme-name} &-#{$input-type} .input-tip {
        color: map-get($input-value, 'color');
      }

    }
  }
}
